#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// Configurações de Wi-Fi
const char* ssid = "SUA_REDE_WIFI";
const char* password = "SENHA_WIFI";

// Configurações MQTT
const char* mqtt_server = "broker.mqtt-dashboard.com";
const int mqtt_port = 1883;
const char* mqtt_user = "";
const char* mqtt_password = "";
const char* mqtt_topic = "agricultura/umidade";

WiFiClient espClient;
PubSubClient client(espClient);

// Configurações dos sensores
#define DHTPIN D4     // Pino onde o DHT22 está conectado
#define DHTTYPE DHT22 // Tipo do sensor DHT
#define SOLO_PIN A0    // Pino analógico para o sensor de umidade do solo
#define RELE_PIN D3    // Pino para a válvula solenoide

DHT dht(DHTPIN, DHTTYPE);

// Variáveis para controle
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Conectando a ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi conectado");
  Serial.println("Endereço IP: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Tentando conexão MQTT...");
    
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    
    if (client.connect(clientId.c_str(), mqtt_user, mqtt_password)) {
      Serial.println("conectado");
    } else {
      Serial.print("falha, rc=");
      Serial.print(client.state());
      Serial.println(" tentando novamente em 5 segundos");
      delay(5000);
    }
  }
}

void setup() {
  pinMode(RELE_PIN, OUTPUT);
  digitalWrite(RELE_PIN, LOW);
  
  Serial.begin(115200);
  dht.begin();
  
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  if (now - lastMsg > 5000) { // Publica a cada 5 segundos
    lastMsg = now;
    
    // Leitura do sensor DHT22 (temperatura e umidade do ar)
    float humidity = dht.readHumidity();
    float temperature = dht.readTemperature();
    
    // Leitura do sensor de umidade do solo
    int soilMoisture = analogRead(SOLO_PIN);
    soilMoisture = map(soilMoisture, 0, 1023, 100, 0); // Convertendo para porcentagem
    
    // Verifica se as leituras são válidas
    if (isnan(humidity) || isnan(temperature)) {
      Serial.println("Falha ao ler o sensor DHT!");
      return;
    }
    
    // Controle da válvula solenoide
    if (soilMoisture < 30) { // Se umidade do solo abaixo de 30%
      digitalWrite(RELE_PIN, HIGH); // Liga a irrigação
    } else if (soilMoisture > 60) { // Se umidade do solo acima de 60%
      digitalWrite(RELE_PIN, LOW); // Desliga a irrigação
    }
    
    // Prepara e envia os dados via MQTT
    String payload = "{";
    payload += "\"temperatura\":"; payload += temperature; payload += ",";
    payload += "\"umidade_ar\":"; payload += humidity; payload += ",";
    payload += "\"umidade_solo\":"; payload += soilMoisture; payload += ",";
    payload += "\"irrigacao\":"; payload += (digitalRead(RELE_PIN) == HIGH ? "true" : "false");
    payload += "}";
    
    payload.toCharArray(msg, MSG_BUFFER_SIZE);
    client.publish(mqtt_topic, msg);
    
    Serial.print("Publicado: ");
    Serial.println(msg);
  }
}
