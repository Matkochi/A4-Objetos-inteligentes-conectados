#define BLYNK_TEMPLATE_ID "TMPL6vLnFBPKT"
#define BLYNK_TEMPLATE_NAME "ESP32 DHT22"
#define BLYNK_AUTH_TOKEN "D647NB0d79kw_rA5-eNzdPp83V5Yb8Ib"

#define BLYNK_PRINT Serial

#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <PubSubClient.h>  // Biblioteca para MQTT
#include <DHT.h>

// Configurações WiFi
char ssid[] = "Wokwi-GUEST";
char pass[] = "";

// Configurações MQTT
const char* mqtt_server = "broker.hivemq.com"; // Broker público para teste
const int mqtt_port = 1883;
const char* mqtt_topic_temp = "esp32dht22/temperature";
const char* mqtt_topic_hum = "esp32dht22/humidity";
const char* mqtt_client_id = "ESP32Client-DHT22";

WiFiClient espClient;
PubSubClient mqttClient(espClient); // Objeto MQTT
BlynkTimer timer;

// Configurações DHT22
#define DHTPIN 5
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Conectando a ");
  Serial.println(ssid);

  WiFi.begin(ssid, pass);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi conectado");
  Serial.println("Endereço IP: ");
  Serial.println(WiFi.localIP());
}

void reconnect_mqtt() {
  while (!mqttClient.connected()) {
    Serial.print("Tentando conexão MQTT...");
    if (mqttClient.connect(mqtt_client_id)) {
      Serial.println("conectado");
    } else {
      Serial.print("falha, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" tentando novamente em 5 segundos");
      delay(5000);
    }
  }
}

void sendSensor() {
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  
  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Envia dados para o Blynk
  Blynk.virtualWrite(V1, h);
  Blynk.virtualWrite(V0, t);
  
  // Publica dados no MQTT
  if (mqttClient.connected()) {
    char tempString[8];
    char humString[8];
    
    dtostrf(t, 6, 2, tempString);
    dtostrf(h, 6, 2, humString);
    
    mqttClient.publish(mqtt_topic_temp, tempString);
    mqttClient.publish(mqtt_topic_hum, humString);
    
    Serial.print("Dados publicados no MQTT - ");
  }

  Serial.print("Temperature: ");
  Serial.print(t);
  Serial.print("°C, Humidity: ");
  Serial.print(h);
  Serial.println("%");

  if (t > 30) {
    Blynk.logEvent("temp_alert", "Temp above 30 degrees");
  }
}

void setup() {
  Serial.begin(115200);
  
  // Inicializa WiFi
  setup_wifi();
  
  // Inicializa Blynk
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  
  // Configura MQTT
  mqttClient.setServer(mqtt_server, mqtt_port);
  
  // Inicializa sensor DHT
  dht.begin();
  
  // Configura timer para leitura do sensor
  timer.setInterval(2500L, sendSensor);
}

void loop() {
  Blynk.run();
  timer.run();
  
  // Mantém conexão MQTT
  if (!mqttClient.connected()) {
    reconnect_mqtt();
  }
  mqttClient.loop();
}
