#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// Wi-Fi
const char* ssid = "SEU_SSID";
const char* password = "SUA_SENHA";

// Broker MQTT (Mosquitto local ou público como broker.hivemq.com)
const char* mqtt_server = "broker.hivemq.com";

// DHT
#define DHTPIN D5
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

// Pinos
#define SOIL_PIN A0
#define VALVE_PIN D2

WiFiClient espClient;
PubSubClient client(espClient);

void setup_wifi() {
  delay(10);
  Serial.println("Conectando-se ao WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi conectado");
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Tentando conexão MQTT...");
    if (client.connect("ESP8266Client")) {
      Serial.println("conectado");
      client.subscribe("irrigacao/controle");  // exemplo de canal de entrada
    } else {
      Serial.print("falha, rc=");
      Serial.print(client.state());
      Serial.println(" tentando novamente em 5s");
      delay(5000);
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  // Exemplo: controle remoto da válvula via MQTT
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  if (String(topic) == "irrigacao/controle") {
    if (message == "ligar") {
      digitalWrite(VALVE_PIN, HIGH);
    } else if (message == "desligar") {
      digitalWrite(VALVE_PIN, LOW);
    }
  }
}

void setup() {
  Serial.begin(9600);
  dht.begin();
  pinMode(VALVE_PIN, OUTPUT);

  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  float temperatura = dht.readTemperature();
  float umidade = dht.readHumidity();
  int umidadeSolo = analogRead(SOIL_PIN);

  Serial.print("Temp: "); Serial.print(temperatura);
  Serial.print(" | Umidade Ar: "); Serial.print(umidade);
  Serial.print(" | Solo: "); Serial.println(umidadeSolo);

  if (umidadeSolo > 700) {
    digitalWrite(VALVE_PIN, HIGH);
    client.publish("irrigacao/status", "Irrigando");
  } else {
    digitalWrite(VALVE_PIN, LOW);
    client.publish("irrigacao/status", "Solo úmido");
  }

  // Publica os valores dos sensores
  char buffer[16];
  dtostrf(temperatura, 4, 2, buffer);
  client.publish("irrigacao/temperatura", buffer);

  dtostrf(umidade, 4, 2, buffer);
  client.publish("irrigacao/umidade_ar", buffer);

  itoa(umidadeSolo, buffer, 10);
  client.publish("irrigacao/umidade_solo", buffer);

  delay(5000);
}
